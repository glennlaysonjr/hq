datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}


enum Role {
  user
  admin
}

enum Provider {
  default
  github
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  picture       String
  role          Role           @default(user)
  provider      Provider       @default(default)
  password      String?
  verified      Boolean        @default(false)
  suspended     Boolean        @default(false)
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  uid       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WriteUps {
    id          String     @id @default(uuid())
    title       String
    description String
    content     Json?
    tags        Tags[] @relation("WriteUpTagRelation")
    rating      Ratings[]
    published   Boolean    @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Pages {
    id          String     @id @default(uuid())
    title       String
    slug        String     @unique
    description String?
    content     Json?
    tags        Tags[]     @relation("PageTagRelation")
    published   Boolean    @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Tags {
    id              String      @id @default(uuid())
    pages           Pages[]    @relation("PageTagRelation")
    witeUps         WriteUps[] @relation("WriteUpTagRelation")
    name            String      @unique
    icon            String?
    description     String?
    published       Boolean     @default(true)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Ratings {
    id          String     @id @default(uuid())
    writeUp     WriteUps   @relation( fields: [writeUpId], references: [id] )
    writeUpId   String
    ratingType  RatingsTypes @relation( fields: [ratingTypeId], references: [id] )
    ratingTypeId String
    published   Boolean    @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model RatingsTypes {
    id          String     @id @default(uuid())
    name        String     @unique
    emoji       String
    rating      Ratings[]
    published   Boolean    @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}